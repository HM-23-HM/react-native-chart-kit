var __assign =
  (this && this.__assign) ||
  function() {
    __assign =
      Object.assign ||
      function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
    return __assign.apply(this, arguments);
  };
import Pie from "paths-js/pie";
import React from "react";
import { View } from "react-native";
import { G, Path, Rect, Svg, Text } from "react-native-svg";
import AbstractChart from "./AbstractChart";
var PieChart = function(props) {
  var _a = props.style,
    style = _a === void 0 ? {} : _a,
    backgroundColor = props.backgroundColor,
    _b = props.absolute,
    absolute = _b === void 0 ? false : _b,
    _c = props.hasLegend,
    hasLegend = _c === void 0 ? true : _c,
    _d = props.avoidFalseZero,
    avoidFalseZero = _d === void 0 ? false : _d;
  var _e = style.borderRadius,
    borderRadius = _e === void 0 ? 0 : _e;
  var chart = Pie({
    center: props.center || [0, 0],
    r: 0,
    R: props.height / 2.5,
    data: props.data,
    accessor: function(x) {
      return x[props.accessor];
    }
  });
  var total = props.data.reduce(function(sum, item) {
    return sum + item[props.accessor];
  }, 0);
  var slices = chart.curves.map(function(c, i) {
    var value;
    if (absolute) {
      value = c.item[props.accessor];
    } else {
      if (total === 0) {
        value = "0%";
      } else {
        var percentage = Math.round((100 / total) * c.item[props.accessor]);
        if (avoidFalseZero && percentage === 0) {
          value = "<1%";
        } else {
          value = percentage + "%";
        }
      }
    }
    return (
      <G key={i}>
        <Path d={c.sector.path.print()} fill={c.item.color} />
        {hasLegend && (
          <>
            <Rect
              width="16px"
              height="16px"
              fill={c.item.color}
              rx={8}
              ry={8}
              x={props.width / 2.5 - 24}
              y={
                -(props.height / 2.5) +
                ((props.height * 0.8) / props.data.length) * i +
                12
              }
            />
            <Text
              fill={c.item.legendFontColor}
              fontSize={c.item.legendFontSize}
              fontFamily={c.item.legendFontFamily}
              x={props.width / 2.5}
              y={
                -(props.height / 2.5) +
                ((props.height * 0.8) / props.data.length) * i +
                12 * 2
              }
            >
              {value}
            </Text>
            <Text
              fill={c.item.legendFontColor}
              fontSize={c.item.legendFontSize}
              fontFamily={c.item.legendFontFamily}
              x={props.width / 2.5}
              y={
                -(props.height / 2.5) +
                ((props.height * 0.8) / props.data.length) * i +
                12 * 2
              }
            >
              {c.item.name}
            </Text>
          </>
        )}
      </G>
    );
  });
  var abstractChart = new AbstractChart();
  return (
    <View
      style={__assign(
        { width: props.width, height: props.height, padding: 0 },
        style
      )}
    >
      <Svg width={props.width} height={props.height}>
        <G>
          {abstractChart.renderDefs(
            __assign(
              { width: props.height, height: props.height },
              props.chartConfig
            )
          )}
        </G>
        <Rect
          width="100%"
          height={props.height}
          rx={borderRadius}
          ry={borderRadius}
          fill={backgroundColor}
        />
        <G
          x={
            props.width / 2 / 2 +
            Number(props.paddingLeft ? props.paddingLeft : 0)
          }
          y={props.height / 2}
        >
          {slices}
        </G>
      </Svg>
    </View>
  );
};
export default PieChart;
//# sourceMappingURL=data:application/json;base64,
