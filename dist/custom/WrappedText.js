import React from "react";
import { useWindowDimensions } from "react-native";
import { G, Text } from "react-native-svg";
var WrappedText = function(_a) {
  var text = _a.text,
    x = _a.x,
    y = _a.y,
    lineHeight = _a.lineHeight,
    fill = _a.fill,
    fontSize = _a.fontSize,
    fontFamily = _a.fontFamily;
  var screenWidth = useWindowDimensions().width;
  var width = screenWidth * 0.2;
  // Helper function to split text into lines
  var wrapText = function(text, fontSize) {
    var words = text.split(" ");
    var lines = [];
    var currentLine = words[0];
    for (var i = 1; i < words.length; i++) {
      var word = words[i];
      var testLine = currentLine + " " + word;
      var testWidth = fontSize * 0.6 * testLine.length; // Approximate text width calculation
      if (testWidth < width) {
        currentLine = testLine;
      } else {
        lines.push(currentLine);
        currentLine = word;
      }
    }
    lines.push(currentLine);
    return lines;
  };
  var lines = wrapText(text, fontSize);
  return (
    <G>
      {lines.map(function(line, index) {
        return (
          <Text
            key={index}
            fill={fill}
            fontSize={fontSize}
            fontFamily={fontFamily}
            x={x}
            y={y + index * lineHeight}
          >
            {line}
          </Text>
        );
      })}
    </G>
  );
};
export default WrappedText;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV3JhcHBlZFRleHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY3VzdG9tL1dyYXBwZWRUZXh0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDMUIsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ25ELE9BQU8sRUFBTyxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFaEQsSUFBTSxXQUFXLEdBQUcsVUFBQyxFQUFzRDtRQUFwRCxJQUFJLFVBQUEsRUFBRSxDQUFDLE9BQUEsRUFBRSxDQUFDLE9BQUEsRUFBRSxVQUFVLGdCQUFBLEVBQUUsSUFBSSxVQUFBLEVBQUUsUUFBUSxjQUFBLEVBQUUsVUFBVSxnQkFBQTtJQUU3RCxJQUFPLFdBQVcsR0FBSyxtQkFBbUIsRUFBRSxNQUExQixDQUEyQjtJQUNyRCxJQUFNLEtBQUssR0FBRyxXQUFXLEdBQUcsR0FBRyxDQUFBO0lBRWpDLDJDQUEyQztJQUMzQyxJQUFNLFFBQVEsR0FBRyxVQUFDLElBQUksRUFBRSxRQUFRO1FBQzlCLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUIsSUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLElBQUksV0FBVyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUUzQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNyQyxJQUFNLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEIsSUFBTSxRQUFRLEdBQU0sV0FBVyxTQUFJLElBQU0sQ0FBQztZQUMxQyxJQUFNLFNBQVMsR0FBRyxRQUFRLEdBQUcsR0FBRyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxxQ0FBcUM7WUFFekYsSUFBSSxTQUFTLEdBQUcsS0FBSyxFQUFFO2dCQUNyQixXQUFXLEdBQUcsUUFBUSxDQUFDO2FBQ3hCO2lCQUFNO2dCQUNMLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQ3hCLFdBQVcsR0FBRyxJQUFJLENBQUM7YUFDcEI7U0FDRjtRQUVELEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDeEIsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDLENBQUM7SUFFRixJQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRXZDLE9BQU8sQ0FDTCxDQUFDLENBQUMsQ0FDQTtNQUFBLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFDLElBQUksRUFBRSxLQUFLLElBQUssT0FBQSxDQUMxQixDQUFDLElBQUksQ0FDSCxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FDWCxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FDWCxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FDbkIsVUFBVSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQ3ZCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNMLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsVUFBVSxDQUFDLENBRTFCO1VBQUEsQ0FBQyxJQUFJLENBQ1A7UUFBQSxFQUFFLElBQUksQ0FBQyxDQUNSLEVBWDJCLENBVzNCLENBQUMsQ0FDSjtJQUFBLEVBQUUsQ0FBQyxDQUFDLENBQ0wsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLGVBQWUsV0FBVyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVdpbmRvd0RpbWVuc2lvbnMgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgU3ZnLCBHLCBUZXh0IH0gZnJvbSAncmVhY3QtbmF0aXZlLXN2Zyc7XG5cbmNvbnN0IFdyYXBwZWRUZXh0ID0gKHsgdGV4dCwgeCwgeSwgbGluZUhlaWdodCwgZmlsbCwgZm9udFNpemUsIGZvbnRGYW1pbHkgfSkgPT4ge1xuXG4gICAgY29uc3QgeyB3aWR0aDogc2NyZWVuV2lkdGggfSA9IHVzZVdpbmRvd0RpbWVuc2lvbnMoKTtcbiAgICBjb25zdCB3aWR0aCA9IHNjcmVlbldpZHRoICogMC4yXG5cbiAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHNwbGl0IHRleHQgaW50byBsaW5lc1xuICBjb25zdCB3cmFwVGV4dCA9ICh0ZXh0LCBmb250U2l6ZSkgPT4ge1xuICAgIGNvbnN0IHdvcmRzID0gdGV4dC5zcGxpdCgnICcpO1xuICAgIGNvbnN0IGxpbmVzID0gW107XG4gICAgbGV0IGN1cnJlbnRMaW5lID0gd29yZHNbMF07XG5cbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHdvcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCB3b3JkID0gd29yZHNbaV07XG4gICAgICBjb25zdCB0ZXN0TGluZSA9IGAke2N1cnJlbnRMaW5lfSAke3dvcmR9YDtcbiAgICAgIGNvbnN0IHRlc3RXaWR0aCA9IGZvbnRTaXplICogMC42ICogdGVzdExpbmUubGVuZ3RoOyAvLyBBcHByb3hpbWF0ZSB0ZXh0IHdpZHRoIGNhbGN1bGF0aW9uXG5cbiAgICAgIGlmICh0ZXN0V2lkdGggPCB3aWR0aCkge1xuICAgICAgICBjdXJyZW50TGluZSA9IHRlc3RMaW5lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGluZXMucHVzaChjdXJyZW50TGluZSk7XG4gICAgICAgIGN1cnJlbnRMaW5lID0gd29yZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsaW5lcy5wdXNoKGN1cnJlbnRMaW5lKTtcbiAgICByZXR1cm4gbGluZXM7XG4gIH07XG5cbiAgY29uc3QgbGluZXMgPSB3cmFwVGV4dCh0ZXh0LCBmb250U2l6ZSk7XG5cbiAgcmV0dXJuIChcbiAgICA8Rz5cbiAgICAgIHtsaW5lcy5tYXAoKGxpbmUsIGluZGV4KSA9PiAoXG4gICAgICAgIDxUZXh0XG4gICAgICAgICAga2V5PXtpbmRleH1cbiAgICAgICAgICBmaWxsPXtmaWxsfVxuICAgICAgICAgIGZvbnRTaXplPXtmb250U2l6ZX1cbiAgICAgICAgICBmb250RmFtaWx5PXtmb250RmFtaWx5fVxuICAgICAgICAgIHg9e3h9XG4gICAgICAgICAgeT17eSArIGluZGV4ICogbGluZUhlaWdodH1cbiAgICAgICAgPlxuICAgICAgICAgIHtsaW5lfVxuICAgICAgICA8L1RleHQ+XG4gICAgICApKX1cbiAgICA8L0c+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBXcmFwcGVkVGV4dDsiXX0=
