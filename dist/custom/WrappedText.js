import React from "react";
import { G, Text } from "react-native-svg";
var WrappedText = function(_a) {
  var text = _a.text,
    x = _a.x,
    y = _a.y,
    fill = _a.fill,
    legendValueProps = _a.legendValueProps;
  var lineHeight = legendValueProps.fontSize * 1.5;
  // Helper function to split text into lines
  var wrapText = function(text, fontSize) {
    var words = text.split(" ");
    var lines = [];
    var currentLine = words[0];
    for (var i = 1; i < words.length; i++) {
      var word = words[i];
      var testLine = currentLine + " " + word;
      var testWidth = fontSize * 0.6 * testLine.length; // Approximate text width calculation
      if (testWidth < legendValueProps.maxWidth) {
        currentLine = testLine;
      } else {
        lines.push(currentLine);
        currentLine = word;
      }
    }
    lines.push(currentLine);
    return lines;
  };
  var lines = wrapText(text, legendValueProps.fontSize);
  return (
    <G>
      {lines.map(function(line, index) {
        return (
          <Text
            key={index}
            fill={fill}
            fontSize={legendValueProps.fontSize}
            fontFamily={legendValueProps.fontFamily}
            x={x}
            y={y + index * lineHeight}
          >
            {line}
          </Text>
        );
      })}
    </G>
  );
};
export default WrappedText;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV3JhcHBlZFRleHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY3VzdG9tL1dyYXBwZWRUZXh0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssTUFBTSxPQUFPLENBQUM7QUFFMUIsT0FBTyxFQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQVNoRCxJQUFNLFdBQVcsR0FBRyxVQUFDLEVBWXBCO1FBWEMsSUFBSSxVQUFBLEVBQ0osQ0FBQyxPQUFBLEVBQ0QsQ0FBQyxPQUFBLEVBQ0QsSUFBSSxVQUFBLEVBQ0osZ0JBQWdCLHNCQUFBO0lBUWhCLElBQU0sVUFBVSxHQUFHLGdCQUFnQixDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUM7SUFFbkQsMkNBQTJDO0lBQzNDLElBQU0sUUFBUSxHQUFHLFVBQUMsSUFBSSxFQUFFLFFBQVE7UUFDOUIsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM5QixJQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDakIsSUFBSSxXQUFXLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTNCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3JDLElBQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QixJQUFNLFFBQVEsR0FBTSxXQUFXLFNBQUksSUFBTSxDQUFDO1lBQzFDLElBQU0sU0FBUyxHQUFHLFFBQVEsR0FBRyxHQUFHLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLHFDQUFxQztZQUV6RixJQUFJLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUU7Z0JBQ3pDLFdBQVcsR0FBRyxRQUFRLENBQUM7YUFDeEI7aUJBQU07Z0JBQ0wsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDeEIsV0FBVyxHQUFHLElBQUksQ0FBQzthQUNwQjtTQUNGO1FBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN4QixPQUFPLEtBQUssQ0FBQztJQUNmLENBQUMsQ0FBQztJQUVGLElBQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFeEQsT0FBTyxDQUNMLENBQUMsQ0FBQyxDQUNBO01BQUEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQUMsSUFBSSxFQUFFLEtBQUssSUFBSyxPQUFBLENBQzFCLENBQUMsSUFBSSxDQUNILEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUNYLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUNYLFFBQVEsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUNwQyxVQUFVLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FDeEMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ0wsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssR0FBRyxVQUFVLENBQUMsQ0FFMUI7VUFBQSxDQUFDLElBQUksQ0FDUDtRQUFBLEVBQUUsSUFBSSxDQUFDLENBQ1IsRUFYMkIsQ0FXM0IsQ0FBQyxDQUNKO0lBQUEsRUFBRSxDQUFDLENBQUMsQ0FDTCxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsZUFBZSxXQUFXLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VXaW5kb3dEaW1lbnNpb25zIH0gZnJvbSBcInJlYWN0LW5hdGl2ZVwiO1xuaW1wb3J0IHsgU3ZnLCBHLCBUZXh0IH0gZnJvbSBcInJlYWN0LW5hdGl2ZS1zdmdcIjtcblxuZXhwb3J0IHR5cGUgTGVnZW5kVmFsdWVQcm9wcyA9IHtcbiAgbWF4V2lkdGg6IG51bWJlcjtcbiAgZm9udFNpemU/OiBudW1iZXI7XG4gIGZvbnRGYW1pbHk/OiBzdHJpbmc7XG4gIGxpbmVIZWlnaHQ/OiBzdHJpbmc7XG59O1xuXG5jb25zdCBXcmFwcGVkVGV4dCA9ICh7XG4gIHRleHQsXG4gIHgsXG4gIHksXG4gIGZpbGwsXG4gIGxlZ2VuZFZhbHVlUHJvcHNcbn06IHtcbiAgdGV4dDogc3RyaW5nO1xuICB4OiBudW1iZXI7XG4gIHk6IG51bWJlcjtcbiAgZmlsbDogc3RyaW5nO1xuICBsZWdlbmRWYWx1ZVByb3BzOiBMZWdlbmRWYWx1ZVByb3BzO1xufSkgPT4ge1xuICBjb25zdCBsaW5lSGVpZ2h0ID0gbGVnZW5kVmFsdWVQcm9wcy5mb250U2l6ZSAqIDEuNTtcblxuICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gc3BsaXQgdGV4dCBpbnRvIGxpbmVzXG4gIGNvbnN0IHdyYXBUZXh0ID0gKHRleHQsIGZvbnRTaXplKSA9PiB7XG4gICAgY29uc3Qgd29yZHMgPSB0ZXh0LnNwbGl0KFwiIFwiKTtcbiAgICBjb25zdCBsaW5lcyA9IFtdO1xuICAgIGxldCBjdXJyZW50TGluZSA9IHdvcmRzWzBdO1xuXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCB3b3Jkcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgd29yZCA9IHdvcmRzW2ldO1xuICAgICAgY29uc3QgdGVzdExpbmUgPSBgJHtjdXJyZW50TGluZX0gJHt3b3JkfWA7XG4gICAgICBjb25zdCB0ZXN0V2lkdGggPSBmb250U2l6ZSAqIDAuNiAqIHRlc3RMaW5lLmxlbmd0aDsgLy8gQXBwcm94aW1hdGUgdGV4dCB3aWR0aCBjYWxjdWxhdGlvblxuXG4gICAgICBpZiAodGVzdFdpZHRoIDwgbGVnZW5kVmFsdWVQcm9wcy5tYXhXaWR0aCkge1xuICAgICAgICBjdXJyZW50TGluZSA9IHRlc3RMaW5lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGluZXMucHVzaChjdXJyZW50TGluZSk7XG4gICAgICAgIGN1cnJlbnRMaW5lID0gd29yZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsaW5lcy5wdXNoKGN1cnJlbnRMaW5lKTtcbiAgICByZXR1cm4gbGluZXM7XG4gIH07XG5cbiAgY29uc3QgbGluZXMgPSB3cmFwVGV4dCh0ZXh0LCBsZWdlbmRWYWx1ZVByb3BzLmZvbnRTaXplKTtcblxuICByZXR1cm4gKFxuICAgIDxHPlxuICAgICAge2xpbmVzLm1hcCgobGluZSwgaW5kZXgpID0+IChcbiAgICAgICAgPFRleHRcbiAgICAgICAgICBrZXk9e2luZGV4fVxuICAgICAgICAgIGZpbGw9e2ZpbGx9XG4gICAgICAgICAgZm9udFNpemU9e2xlZ2VuZFZhbHVlUHJvcHMuZm9udFNpemV9XG4gICAgICAgICAgZm9udEZhbWlseT17bGVnZW5kVmFsdWVQcm9wcy5mb250RmFtaWx5fVxuICAgICAgICAgIHg9e3h9XG4gICAgICAgICAgeT17eSArIGluZGV4ICogbGluZUhlaWdodH1cbiAgICAgICAgPlxuICAgICAgICAgIHtsaW5lfVxuICAgICAgICA8L1RleHQ+XG4gICAgICApKX1cbiAgICA8L0c+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBXcmFwcGVkVGV4dDtcbiJdfQ==
