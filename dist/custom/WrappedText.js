import React from "react";
import { useWindowDimensions } from "react-native";
import { G, Text } from "react-native-svg";
var WrappedText = function(_a) {
  var text = _a.text,
    x = _a.x,
    y = _a.y,
    fill = _a.fill,
    fontSize = _a.fontSize,
    fontFamily = _a.fontFamily;
  var screenWidth = useWindowDimensions().width;
  var width = screenWidth * 0.2;
  var lineHeight = fontSize * 1.5;
  // Helper function to split text into lines
  var wrapText = function(text, fontSize) {
    var words = text.split(" ");
    var lines = [];
    var currentLine = words[0];
    for (var i = 1; i < words.length; i++) {
      var word = words[i];
      var testLine = currentLine + " " + word;
      var testWidth = fontSize * 0.6 * testLine.length; // Approximate text width calculation
      if (testWidth < width) {
        currentLine = testLine;
      } else {
        lines.push(currentLine);
        currentLine = word;
      }
    }
    lines.push(currentLine);
    return lines;
  };
  var lines = wrapText(text, fontSize);
  return (
    <G>
      {lines.map(function(line, index) {
        return (
          <Text
            key={index}
            fill={fill}
            fontSize={fontSize}
            fontFamily={fontFamily}
            x={x}
            y={y + index * lineHeight}
          >
            {line}
          </Text>
        );
      })}
    </G>
  );
};
export default WrappedText;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV3JhcHBlZFRleHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY3VzdG9tL1dyYXBwZWRUZXh0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDMUIsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ25ELE9BQU8sRUFBTyxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFaEQsSUFBTSxXQUFXLEdBQUcsVUFBQyxFQU9wQjtRQU5DLElBQUksVUFBQSxFQUNKLENBQUMsT0FBQSxFQUNELENBQUMsT0FBQSxFQUNELElBQUksVUFBQSxFQUNKLFFBQVEsY0FBQSxFQUNSLFVBQVUsZ0JBQUE7SUFFRixJQUFPLFdBQVcsR0FBSyxtQkFBbUIsRUFBRSxNQUExQixDQUEyQjtJQUNyRCxJQUFNLEtBQUssR0FBRyxXQUFXLEdBQUcsR0FBRyxDQUFDO0lBQ2hDLElBQU0sVUFBVSxHQUFHLFFBQVEsR0FBRyxHQUFHLENBQUE7SUFFakMsMkNBQTJDO0lBQzNDLElBQU0sUUFBUSxHQUFHLFVBQUMsSUFBSSxFQUFFLFFBQVE7UUFDOUIsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM5QixJQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDakIsSUFBSSxXQUFXLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTNCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3JDLElBQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QixJQUFNLFFBQVEsR0FBTSxXQUFXLFNBQUksSUFBTSxDQUFDO1lBQzFDLElBQU0sU0FBUyxHQUFHLFFBQVEsR0FBRyxHQUFHLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLHFDQUFxQztZQUV6RixJQUFJLFNBQVMsR0FBRyxLQUFLLEVBQUU7Z0JBQ3JCLFdBQVcsR0FBRyxRQUFRLENBQUM7YUFDeEI7aUJBQU07Z0JBQ0wsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDeEIsV0FBVyxHQUFHLElBQUksQ0FBQzthQUNwQjtTQUNGO1FBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN4QixPQUFPLEtBQUssQ0FBQztJQUNmLENBQUMsQ0FBQztJQUVGLElBQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFFdkMsT0FBTyxDQUNMLENBQUMsQ0FBQyxDQUNBO01BQUEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQUMsSUFBSSxFQUFFLEtBQUssSUFBSyxPQUFBLENBQzFCLENBQUMsSUFBSSxDQUNILEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUNYLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUNYLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUNuQixVQUFVLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FDdkIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ0wsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssR0FBRyxVQUFVLENBQUMsQ0FFMUI7VUFBQSxDQUFDLElBQUksQ0FDUDtRQUFBLEVBQUUsSUFBSSxDQUFDLENBQ1IsRUFYMkIsQ0FXM0IsQ0FBQyxDQUNKO0lBQUEsRUFBRSxDQUFDLENBQUMsQ0FDTCxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsZUFBZSxXQUFXLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VXaW5kb3dEaW1lbnNpb25zIH0gZnJvbSBcInJlYWN0LW5hdGl2ZVwiO1xuaW1wb3J0IHsgU3ZnLCBHLCBUZXh0IH0gZnJvbSBcInJlYWN0LW5hdGl2ZS1zdmdcIjtcblxuY29uc3QgV3JhcHBlZFRleHQgPSAoe1xuICB0ZXh0LFxuICB4LFxuICB5LFxuICBmaWxsLFxuICBmb250U2l6ZSxcbiAgZm9udEZhbWlseVxufSkgPT4ge1xuICBjb25zdCB7IHdpZHRoOiBzY3JlZW5XaWR0aCB9ID0gdXNlV2luZG93RGltZW5zaW9ucygpO1xuICBjb25zdCB3aWR0aCA9IHNjcmVlbldpZHRoICogMC4yO1xuICBjb25zdCBsaW5lSGVpZ2h0ID0gZm9udFNpemUgKiAxLjVcblxuICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gc3BsaXQgdGV4dCBpbnRvIGxpbmVzXG4gIGNvbnN0IHdyYXBUZXh0ID0gKHRleHQsIGZvbnRTaXplKSA9PiB7XG4gICAgY29uc3Qgd29yZHMgPSB0ZXh0LnNwbGl0KFwiIFwiKTtcbiAgICBjb25zdCBsaW5lcyA9IFtdO1xuICAgIGxldCBjdXJyZW50TGluZSA9IHdvcmRzWzBdO1xuXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCB3b3Jkcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgd29yZCA9IHdvcmRzW2ldO1xuICAgICAgY29uc3QgdGVzdExpbmUgPSBgJHtjdXJyZW50TGluZX0gJHt3b3JkfWA7XG4gICAgICBjb25zdCB0ZXN0V2lkdGggPSBmb250U2l6ZSAqIDAuNiAqIHRlc3RMaW5lLmxlbmd0aDsgLy8gQXBwcm94aW1hdGUgdGV4dCB3aWR0aCBjYWxjdWxhdGlvblxuXG4gICAgICBpZiAodGVzdFdpZHRoIDwgd2lkdGgpIHtcbiAgICAgICAgY3VycmVudExpbmUgPSB0ZXN0TGluZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpbmVzLnB1c2goY3VycmVudExpbmUpO1xuICAgICAgICBjdXJyZW50TGluZSA9IHdvcmQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGluZXMucHVzaChjdXJyZW50TGluZSk7XG4gICAgcmV0dXJuIGxpbmVzO1xuICB9O1xuXG4gIGNvbnN0IGxpbmVzID0gd3JhcFRleHQodGV4dCwgZm9udFNpemUpO1xuXG4gIHJldHVybiAoXG4gICAgPEc+XG4gICAgICB7bGluZXMubWFwKChsaW5lLCBpbmRleCkgPT4gKFxuICAgICAgICA8VGV4dFxuICAgICAgICAgIGtleT17aW5kZXh9XG4gICAgICAgICAgZmlsbD17ZmlsbH1cbiAgICAgICAgICBmb250U2l6ZT17Zm9udFNpemV9XG4gICAgICAgICAgZm9udEZhbWlseT17Zm9udEZhbWlseX1cbiAgICAgICAgICB4PXt4fVxuICAgICAgICAgIHk9e3kgKyBpbmRleCAqIGxpbmVIZWlnaHR9XG4gICAgICAgID5cbiAgICAgICAgICB7bGluZX1cbiAgICAgICAgPC9UZXh0PlxuICAgICAgKSl9XG4gICAgPC9HPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgV3JhcHBlZFRleHQ7XG4iXX0=
